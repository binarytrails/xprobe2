!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/darren@hiebert.com/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://darren.hiebert.com/ctags/	/official site/
!_TAG_PROGRAM_VERSION	3.3.1	/with C, C++, Eiffel, Fortran, and Java  support/
ARP	arp.cc	/^ARP::ARP()$/;"	f	namespace:usipp
ARP	usi++/arp.h	/^class ARP : public Layer2 {$/;"	c	namespace:usipp
ARPHRD_ADAPT	usi++/usi-structs.h	154;"	d
ARPHRD_APPLETLK	usi++/usi-structs.h	144;"	d
ARPHRD_ARCNET	usi++/usi-structs.h	143;"	d
ARPHRD_ASH	usi++/usi-structs.h	174;"	d
ARPHRD_AX25	usi++/usi-structs.h	139;"	d
ARPHRD_BIF	usi++/usi-structs.h	168;"	d
ARPHRD_CHAOS	usi++/usi-structs.h	141;"	d
ARPHRD_CSLIP	usi++/usi-structs.h	150;"	d
ARPHRD_CSLIP6	usi++/usi-structs.h	152;"	d
ARPHRD_DLCI	usi++/usi-structs.h	145;"	d
ARPHRD_ECONET	usi++/usi-structs.h	175;"	d
ARPHRD_EETHER	usi++/usi-structs.h	138;"	d
ARPHRD_ETHER	usi++/usi-structs.h	137;"	d
ARPHRD_FCAL	usi++/usi-structs.h	178;"	d
ARPHRD_FCPFABRIC	usi++/usi-structs.h	180;"	d
ARPHRD_FCPL	usi++/usi-structs.h	179;"	d
ARPHRD_FCPP	usi++/usi-structs.h	177;"	d
ARPHRD_FDDI	usi++/usi-structs.h	167;"	d
ARPHRD_FRAD	usi++/usi-structs.h	163;"	d
ARPHRD_HDLC	usi++/usi-structs.h	158;"	d
ARPHRD_HIPPI	usi++/usi-structs.h	173;"	d
ARPHRD_IEEE802	usi++/usi-structs.h	142;"	d
ARPHRD_IPDDP	usi++/usi-structs.h	170;"	d
ARPHRD_IPGRE	usi++/usi-structs.h	171;"	d
ARPHRD_IRDA	usi++/usi-structs.h	176;"	d
ARPHRD_LAPB	usi++/usi-structs.h	159;"	d
ARPHRD_LOCALTLK	usi++/usi-structs.h	166;"	d
ARPHRD_LOOPBACK	usi++/usi-structs.h	165;"	d
ARPHRD_METRICOM	usi++/usi-structs.h	146;"	d
ARPHRD_NETROM	usi++/usi-structs.h	136;"	d
ARPHRD_PIMREG	usi++/usi-structs.h	172;"	d
ARPHRD_PPP	usi++/usi-structs.h	157;"	d
ARPHRD_PRONET	usi++/usi-structs.h	140;"	d
ARPHRD_ROSE	usi++/usi-structs.h	155;"	d
ARPHRD_RSRVD	usi++/usi-structs.h	153;"	d
ARPHRD_SIT	usi++/usi-structs.h	169;"	d
ARPHRD_SKIP	usi++/usi-structs.h	164;"	d
ARPHRD_SLIP	usi++/usi-structs.h	149;"	d
ARPHRD_SLIP6	usi++/usi-structs.h	151;"	d
ARPHRD_TUNNEL	usi++/usi-structs.h	161;"	d
ARPHRD_TUNNEL6	usi++/usi-structs.h	162;"	d
ARPHRD_X25	usi++/usi-structs.h	156;"	d
ARPOP_REPLY	usi++/usi-structs.h	131;"	d
ARPOP_REQUEST	usi++/usi-structs.h	130;"	d
ARPOP_RREPLY	usi++/usi-structs.h	133;"	d
ARPOP_RREQUEST	usi++/usi-structs.h	132;"	d
ETH_ALEN	usi++/usi-structs.h	41;"	d
ETH_P_802_2	usi++/usi-structs.h	91;"	d
ETH_P_802_3	usi++/usi-structs.h	88;"	d
ETH_P_AARP	usi++/usi-structs.h	80;"	d
ETH_P_ALL	usi++/usi-structs.h	90;"	d
ETH_P_ARP	usi++/usi-structs.h	68;"	d
ETH_P_ATALK	usi++/usi-structs.h	79;"	d
ETH_P_AX25	usi++/usi-structs.h	89;"	d
ETH_P_BPQ	usi++/usi-structs.h	69;"	d
ETH_P_CONTROL	usi++/usi-structs.h	100;"	d
ETH_P_CUST	usi++/usi-structs.h	76;"	d
ETH_P_DDCMP	usi++/usi-structs.h	93;"	d
ETH_P_DEC	usi++/usi-structs.h	70;"	d
ETH_P_DIAG	usi++/usi-structs.h	75;"	d
ETH_P_DNA_DL	usi++/usi-structs.h	71;"	d
ETH_P_DNA_RC	usi++/usi-structs.h	72;"	d
ETH_P_DNA_RT	usi++/usi-structs.h	73;"	d
ETH_P_ECHO	usi++/usi-structs.h	64;"	d
ETH_P_IP	usi++/usi-structs.h	66;"	d
ETH_P_IPV6	usi++/usi-structs.h	82;"	d
ETH_P_IPX	usi++/usi-structs.h	81;"	d
ETH_P_IRDA	usi++/usi-structs.h	101;"	d
ETH_P_LAT	usi++/usi-structs.h	74;"	d
ETH_P_LOCALTALK	usi++/usi-structs.h	96;"	d
ETH_P_LOOP	usi++/usi-structs.h	63;"	d
ETH_P_MOBITEX	usi++/usi-structs.h	99;"	d
ETH_P_PPPTALK	usi++/usi-structs.h	97;"	d
ETH_P_PPP_MP	usi++/usi-structs.h	95;"	d
ETH_P_PUP	usi++/usi-structs.h	65;"	d
ETH_P_RARP	usi++/usi-structs.h	78;"	d
ETH_P_SCA	usi++/usi-structs.h	77;"	d
ETH_P_SNAP	usi++/usi-structs.h	92;"	d
ETH_P_TR_802_2	usi++/usi-structs.h	98;"	d
ETH_P_WAN_PPP	usi++/usi-structs.h	94;"	d
ETH_P_X25	usi++/usi-structs.h	67;"	d
HAVE_FCNTL_H	config.h	30;"	d
HAVE_FCNTL_H	usi++/config.h	30;"	d
HAVE_NETPACKET_PACKET_H	config.h	53;"	d
HAVE_NETPACKET_PACKET_H	usi++/config.h	53;"	d
HAVE_SYS_IOCTL_H	config.h	36;"	d
HAVE_SYS_IOCTL_H	usi++/config.h	36;"	d
HAVE_SYS_TIME_H	config.h	42;"	d
HAVE_SYS_TIME_H	usi++/config.h	42;"	d
HAVE_UNISTD_H	config.h	48;"	d
HAVE_UNISTD_H	usi++/config.h	48;"	d
HERROR	usi++/usi++.h	/^	HERROR,$/;"	e	enum:usipp::<anonymous>
ICMP	icmp.cc	/^ICMP::ICMP(const ICMP &rhs)$/;"	f	namespace:usipp
ICMP	icmp.cc	/^ICMP::ICMP(const char* host) $/;"	f	namespace:usipp
ICMP	usi++/icmp.h	/^class ICMP : public IP {$/;"	c	namespace:usipp
ICMP_ADDRESS	usi++/usi-structs.h	230;"	d
ICMP_ADDRESSREPLY	usi++/usi-structs.h	231;"	d
ICMP_DEST_UNREACH	usi++/usi-structs.h	220;"	d
ICMP_ECHO	usi++/usi-structs.h	223;"	d
ICMP_ECHOREPLY	usi++/usi-structs.h	219;"	d
ICMP_EXC_FRAGTIME	usi++/usi-structs.h	262;"	d
ICMP_EXC_TTL	usi++/usi-structs.h	261;"	d
ICMP_FRAG_NEEDED	usi++/usi-structs.h	240;"	d
ICMP_HOST_ANO	usi++/usi-structs.h	246;"	d
ICMP_HOST_ISOLATED	usi++/usi-structs.h	244;"	d
ICMP_HOST_UNKNOWN	usi++/usi-structs.h	243;"	d
ICMP_HOST_UNREACH	usi++/usi-structs.h	237;"	d
ICMP_HOST_UNR_TOS	usi++/usi-structs.h	248;"	d
ICMP_INFO_REPLY	usi++/usi-structs.h	229;"	d
ICMP_INFO_REQUEST	usi++/usi-structs.h	228;"	d
ICMP_NET_ANO	usi++/usi-structs.h	245;"	d
ICMP_NET_UNKNOWN	usi++/usi-structs.h	242;"	d
ICMP_NET_UNREACH	usi++/usi-structs.h	236;"	d
ICMP_NET_UNR_TOS	usi++/usi-structs.h	247;"	d
ICMP_PARAMETERPROB	usi++/usi-structs.h	225;"	d
ICMP_PKT_FILTERED	usi++/usi-structs.h	249;"	d
ICMP_PORT_UNREACH	usi++/usi-structs.h	239;"	d
ICMP_PREC_CUTOFF	usi++/usi-structs.h	251;"	d
ICMP_PREC_VIOLATION	usi++/usi-structs.h	250;"	d
ICMP_PROT_UNREACH	usi++/usi-structs.h	238;"	d
ICMP_REDIRECT	usi++/usi-structs.h	222;"	d
ICMP_REDIR_HOST	usi++/usi-structs.h	256;"	d
ICMP_REDIR_HOSTTOS	usi++/usi-structs.h	258;"	d
ICMP_REDIR_NET	usi++/usi-structs.h	255;"	d
ICMP_REDIR_NETTOS	usi++/usi-structs.h	257;"	d
ICMP_SOURCE_QUENCH	usi++/usi-structs.h	221;"	d
ICMP_SR_FAILED	usi++/usi-structs.h	241;"	d
ICMP_TIMESTAMP	usi++/usi-structs.h	226;"	d
ICMP_TIMESTAMPREPLY	usi++/usi-structs.h	227;"	d
ICMP_TIME_EXCEEDED	usi++/usi-structs.h	224;"	d
IFF_ALLMULTI	usi++/if.h	/^    IFF_ALLMULTI = 0x200,	\/* Receive all multicast packets.  *\/$/;"	e
IFF_ALLMULTI	usi++/if.h	51;"	d
IFF_AUTOMEDIA	usi++/if.h	/^    IFF_AUTOMEDIA = 0x4000	\/* Auto media select active.  *\/$/;"	e
IFF_AUTOMEDIA	usi++/if.h	64;"	d
IFF_BROADCAST	usi++/if.h	/^    IFF_BROADCAST = 0x2,	\/* Broadcast address valid.  *\/$/;"	e
IFF_BROADCAST	usi++/if.h	33;"	d
IFF_DEBUG	usi++/if.h	/^    IFF_DEBUG = 0x4,		\/* Turn on debugging.  *\/$/;"	e
IFF_DEBUG	usi++/if.h	35;"	d
IFF_LOOPBACK	usi++/if.h	/^    IFF_LOOPBACK = 0x8,		\/* Is a loopback net.  *\/$/;"	e
IFF_LOOPBACK	usi++/if.h	37;"	d
IFF_MASTER	usi++/if.h	/^    IFF_MASTER = 0x400,		\/* Master of a load balancer.  *\/$/;"	e
IFF_MASTER	usi++/if.h	54;"	d
IFF_MULTICAST	usi++/if.h	/^    IFF_MULTICAST = 0x1000,	\/* Supports multicast.  *\/$/;"	e
IFF_MULTICAST	usi++/if.h	59;"	d
IFF_NOARP	usi++/if.h	/^    IFF_NOARP = 0x80,		\/* No address resolution protocol.  *\/$/;"	e
IFF_NOARP	usi++/if.h	45;"	d
IFF_NOTRAILERS	usi++/if.h	/^    IFF_NOTRAILERS = 0x20,	\/* Avoid use of trailers.  *\/$/;"	e
IFF_NOTRAILERS	usi++/if.h	41;"	d
IFF_POINTOPOINT	usi++/if.h	/^    IFF_POINTOPOINT = 0x10,	\/* Interface is point-to-point link.  *\/$/;"	e
IFF_POINTOPOINT	usi++/if.h	39;"	d
IFF_PORTSEL	usi++/if.h	/^    IFF_PORTSEL = 0x2000,	\/* Can set media type.  *\/$/;"	e
IFF_PORTSEL	usi++/if.h	62;"	d
IFF_PROMISC	usi++/if.h	/^    IFF_PROMISC = 0x100,	\/* Receive all packets.  *\/$/;"	e
IFF_PROMISC	usi++/if.h	47;"	d
IFF_RUNNING	usi++/if.h	/^    IFF_RUNNING = 0x40,		\/* Resources allocated.  *\/$/;"	e
IFF_RUNNING	usi++/if.h	43;"	d
IFF_SLAVE	usi++/if.h	/^    IFF_SLAVE = 0x800,		\/* Slave of a load balancer.  *\/$/;"	e
IFF_SLAVE	usi++/if.h	56;"	d
IFF_UP	usi++/if.h	/^    IFF_UP = 0x1,		\/* Interface is up.  *\/$/;"	e
IFF_UP	usi++/if.h	31;"	d
IFHWADDRLEN	usi++/if.h	112;"	d
IFNAMSIZ	usi++/if.h	113;"	d
IP	ip.cc	/^IP::IP(const IP &rhs)$/;"	f	namespace:usipp
IP	ip.cc	/^IP::IP(const char *dst, u_int8_t proto)$/;"	f	namespace:usipp
IP	ip.cc	/^IP::IP(u_int32_t dst, u_int8_t proto)$/;"	f	namespace:usipp
IP	usi++/ip.h	/^class IP : public Layer2 {$/;"	c	namespace:usipp
IPPROTO_ICMP	icmp.cc	25;"	d	file:
IPPROTO_TCP	tcp.cc	24;"	d	file:
IPPROTO_UDP	udp.cc	22;"	d	file:
IP_DF	usi++/usi-structs.h	343;"	d
IP_MF	usi++/usi-structs.h	346;"	d
IP_OFFMASK	usi++/usi-structs.h	349;"	d
IP_RF	usi++/usi-structs.h	340;"	d
Layer2	Layer2.cc	/^Layer2::Layer2(RX *r, TX *t)$/;"	f	namespace:usipp
Layer2	usi++/Layer2.h	/^class Layer2 {$/;"	c	namespace:usipp
MAXHOSTLEN	usi++/usi-structs.h	27;"	d
NR_ICMP_TYPES	usi++/usi-structs.h	232;"	d
NR_ICMP_UNREACH	usi++/usi-structs.h	252;"	d
PCAP	usi++/usi++.h	/^	PCAP,$/;"	e	enum:usipp::<anonymous>
PERROR	usi++/usi++.h	/^	PERROR = 0,$/;"	e	enum:usipp::<anonymous>
Pcap	datalink.cc	/^Pcap::Pcap()$/;"	f	namespace:usipp
Pcap	datalink.cc	/^Pcap::Pcap(char *filterStr)$/;"	f	namespace:usipp
Pcap	datalink.cc	/^Pcap::Pcap(const Pcap &rhs)$/;"	f	namespace:usipp
Pcap	usi++/datalink.h	/^class Pcap : public RX {$/;"	c	namespace:usipp
RX	usi++/RX.h	/^	RX() {}$/;"	f	class:usipp::RX
RX	usi++/RX.h	/^class RX {$/;"	c	namespace:usipp
STDC_HEADERS	config.h	21;"	d
STDC_HEADERS	usi++/config.h	21;"	d
STDERR	usi++/usi++.h	/^	STDERR$/;"	e	enum:usipp::<anonymous>
TCP	tcp.cc	/^TCP::TCP(const TCP &rhs)$/;"	f	namespace:usipp
TCP	tcp.cc	/^TCP::TCP(const char *host)$/;"	f	namespace:usipp
TCP	usi++/tcp.h	/^class TCP : public IP {$/;"	c	namespace:usipp
TCPOLEN_MAXSEG	usi++/usi-structs.h	374;"	d
TCPOLEN_SACK_PERMITTED	usi++/usi-structs.h	378;"	d
TCPOLEN_TIMESTAMP	usi++/usi-structs.h	381;"	d
TCPOLEN_TSTAMP_APPA	usi++/usi-structs.h	382;"	d
TCPOLEN_WINDOW	usi++/usi-structs.h	376;"	d
TCPOPT_EOL	usi++/usi-structs.h	371;"	d
TCPOPT_MAXSEG	usi++/usi-structs.h	373;"	d
TCPOPT_NOP	usi++/usi-structs.h	372;"	d
TCPOPT_SACK	usi++/usi-structs.h	379;"	d
TCPOPT_SACK_PERMITTED	usi++/usi-structs.h	377;"	d
TCPOPT_TIMESTAMP	usi++/usi-structs.h	380;"	d
TCPOPT_WINDOW	usi++/usi-structs.h	375;"	d
TH_ACK	usi++/usi-structs.h	313;"	d
TH_FIN	usi++/usi-structs.h	301;"	d
TH_PUSH	usi++/usi-structs.h	310;"	d
TH_RST	usi++/usi-structs.h	307;"	d
TH_SYN	usi++/usi-structs.h	304;"	d
TH_URG	usi++/usi-structs.h	316;"	d
TIME_WITH_SYS_TIME	config.h	24;"	d
TIME_WITH_SYS_TIME	usi++/config.h	24;"	d
TX	usi++/TX.h	/^	TX() {}$/;"	f	class:usipp::TX
TX	usi++/TX.h	/^class TX {$/;"	c	namespace:usipp
TX_IP	usi++/TX_IP.h	/^	TX_IP() : rawfd(-1) {}$/;"	f	class:usipp::TX_IP
TX_IP	usi++/TX_IP.h	/^class TX_IP : public TX {$/;"	c	namespace:usipp
UDP	udp.cc	/^UDP::UDP(const UDP &rhs)$/;"	f	namespace:usipp
UDP	udp.cc	/^UDP::UDP(const char *host)$/;"	f	namespace:usipp
UDP	usi++/udp.h	/^class UDP : public IP {$/;"	c	namespace:usipp
USI_VERSION	usi++/usi++.h	16;"	d
_ARP_H_	usi++/arp.h	13;"	d
_DATALINK_H_	usi++/datalink.h	11;"	d
_ICMP_H_	usi++/icmp.h	12;"	d
_IP_H_	usi++/ip.h	12;"	d
_LAYER2_H_	usi++/Layer2.h	11;"	d
_NET_IF_H	usi++/if.h	21;"	d
_RX_H_	usi++/RX.h	11;"	d
_TCP_H_	usi++/tcp.h	13;"	d
_TX_H_	usi++/TX.h	11;"	d
_TX_IP_H_	usi++/TX_IP.h	11;"	d
_UDP_H_	usi++/udp.h	13;"	d
_USIPP_H_	usi++/usi++.h	13;"	d
_USI_CONFIG_H_	config.h	3;"	d
_USI_CONFIG_H_	usi++/config.h	3;"	d
_USI_STRUCTS_H_	usi++/usi-structs.h	13;"	d
ar_hln	usi++/usi-structs.h	/^        unsigned char ar_hln;	\/\/ Length of hardware address.  $/;"	m	struct:usipp::arphdr
ar_hrd	usi++/usi-structs.h	/^   	u_int16_t ar_hrd;	\/\/ Format of hardware address.  $/;"	m	struct:usipp::arphdr
ar_op	usi++/usi-structs.h	/^        u_int16_t ar_op;	\/\/ ARP opcode (command).  $/;"	m	struct:usipp::arphdr
ar_pln	usi++/usi-structs.h	/^        unsigned char ar_pln;	\/\/ Length of protocol address.  $/;"	m	struct:usipp::arphdr
ar_pro	usi++/usi-structs.h	/^        u_int16_t ar_pro;	\/\/ Format of protocol address.  $/;"	m	struct:usipp::arphdr
arp_hln	usi++/usi-structs.h	195;"	d
arp_hrd	usi++/usi-structs.h	193;"	d
arp_op	usi++/usi-structs.h	197;"	d
arp_pln	usi++/usi-structs.h	196;"	d
arp_pro	usi++/usi-structs.h	194;"	d
arp_sha	usi++/usi-structs.h	/^	u_int8_t arp_sha[ETH_ALEN];	\/\/ sender hardware address $/;"	m	struct:usipp::ether_arp
arp_spa	usi++/usi-structs.h	/^	u_int8_t arp_spa[4];		\/\/ sender protocol address $/;"	m	struct:usipp::ether_arp
arp_tha	usi++/usi-structs.h	/^	u_int8_t arp_tha[ETH_ALEN];	\/\/ target hardware address $/;"	m	struct:usipp::ether_arp
arp_tpa	usi++/usi-structs.h	/^	u_int8_t arp_tpa[4];		\/\/ target protocol address $/;"	m	struct:usipp::ether_arp
arphdr	usi++/arp.h	/^   	struct ether_arp arphdr;$/;"	m	class:usipp::ARP
arphdr	usi++/usi-structs.h	/^struct arphdr {$/;"	s	namespace:usipp
base_addr	usi++/if.h	/^    unsigned short int base_addr;$/;"	m	struct:ifmap
check	usi++/usi-structs.h	/^        u_int16_t	check;$/;"	m	struct:usipp::udphdr
check	usi++/usi-structs.h	/^        u_int16_t check;$/;"	m	struct:usipp::iphdr
code	usi++/usi-structs.h	/^        u_int8_t code;$/;"	m	struct:usipp::icmphdr
daddr	usi++/usi-structs.h	/^        u_int32_t daddr;$/;"	m	struct:usipp::iphdr
daddr	usi++/usi-structs.h	/^        u_int32_t daddr;$/;"	m	struct:usipp::pseudohdr
data	usi++/usi-structs.h	/^	char *data;     \/\/ the packet itself$/;"	m	struct:usipp::fragments
datalink	usi++/datalink.h	/^	int datalink;$/;"	m	class:usipp::Pcap
dest	usi++/usi-structs.h	/^        u_int16_t	dest;$/;"	m	struct:usipp::udphdr
dev	usi++/datalink.h	/^        char dev[10];$/;"	m	class:usipp::Pcap
die	misc.cc	/^void die(const char *message, errorFuncs what, int error)$/;"	f	namespace:usipp
dma	usi++/if.h	/^    unsigned char dma;$/;"	m	struct:ifmap
ea_hdr	usi++/usi-structs.h	/^	struct	arphdr ea_hdr;		\/\/ fixed-size header $/;"	m	struct:usipp::ether_arp
echo	usi++/usi-structs.h	/^                } echo;$/;"	m	union:usipp::icmphdr::<anonymous>
errorFuncs	usi++/usi++.h	/^} errorFuncs;$/;"	t	namespace:usipp
ether	usi++/datalink.h	/^	struct ether_header ether;$/;"	m	class:usipp::Pcap
ether_addr	usi++/usi-structs.h	/^struct ether_addr$/;"	s	namespace:usipp
ether_addr_octet	usi++/usi-structs.h	/^   	u_int8_t ether_addr_octet[ETH_ALEN];$/;"	m	struct:usipp::ether_addr
ether_arp	usi++/usi-structs.h	/^struct	ether_arp {$/;"	s	namespace:usipp
ether_dhost	usi++/usi-structs.h	/^   	u_int8_t  ether_dhost[ETH_ALEN];	\/\/ destination eth addr	$/;"	m	struct:usipp::ether_header
ether_header	usi++/usi-structs.h	/^struct ether_header$/;"	s	namespace:usipp
ether_shost	usi++/usi-structs.h	/^        u_int8_t  ether_shost[ETH_ALEN];	\/\/ source ether addr	$/;"	m	struct:usipp::ether_header
ether_type	usi++/usi-structs.h	/^        u_int16_t ether_type;		        \/\/ packet type ID field	$/;"	m	struct:usipp::ether_header
exceptions	misc.cc	/^bool exceptions = false;$/;"	m	namespace:usipp
fault	usi++/usi++.h	/^	string fault;$/;"	m	class:usipp::usifault
filter	usi++/datalink.h	/^	struct bpf_program filter;$/;"	m	class:usipp::Pcap
filter_string	usi++/datalink.h	/^        char filter_string[1000];$/;"	m	class:usipp::Pcap
frag	usi++/usi-structs.h	/^                } frag;$/;"	m	union:usipp::icmphdr::<anonymous>
frag_off	usi++/usi-structs.h	/^        u_int16_t frag_off;$/;"	m	struct:usipp::iphdr
fragments	usi++/usi-structs.h	/^struct fragments {$/;"	s	namespace:usipp
framelen	usi++/datalink.h	/^	size_t framelen, snaplen;$/;"	m	class:usipp::Pcap
gateway	usi++/usi-structs.h	/^	        u_int32_t gateway;$/;"	m	union:usipp::icmphdr::<anonymous>
get_ack	tcp.cc	/^u_int32_t TCP::get_ack()$/;"	f	namespace:usipp
get_code	icmp.cc	/^u_int8_t ICMP::get_code()$/;"	f	namespace:usipp
get_datalink	datalink.cc	/^int Pcap::get_datalink()$/;"	f	namespace:usipp
get_dst	ip.cc	/^char *IP::get_dst(int resolv, char *s, size_t len)$/;"	f	namespace:usipp
get_dst	ip.cc	/^u_int32_t IP::get_dst()$/;"	f	namespace:usipp
get_dstport	tcp.cc	/^u_int16_t TCP:: get_dstport()$/;"	f	namespace:usipp
get_dstport	udp.cc	/^u_int16_t UDP::get_dstport()$/;"	f	namespace:usipp
get_etype	datalink.cc	/^u_int16_t Pcap::get_etype()$/;"	f	namespace:usipp
get_flags	tcp.cc	/^u_int8_t TCP::get_flags()$/;"	f	namespace:usipp
get_fragoff	ip.cc	/^u_int16_t IP::get_fragoff()$/;"	f	namespace:usipp
get_frame	datalink.cc	/^void *Pcap::get_frame(void *hwframe, size_t len)$/;"	f	namespace:usipp
get_framelen	datalink.cc	/^int Pcap::get_framelen()$/;"	f	namespace:usipp
get_gateway	icmp.cc	/^u_int32_t ICMP::get_gateway()$/;"	f	namespace:usipp
get_hlen	ip.cc	/^u_int8_t IP::get_hlen()$/;"	f	namespace:usipp
get_hwdst	datalink.cc	/^char *Pcap::get_hwdst(char *hwaddr, size_t len)$/;"	f	namespace:usipp
get_hwsrc	datalink.cc	/^char *Pcap::get_hwsrc(char *hwaddr, size_t len)$/;"	f	namespace:usipp
get_icmpId	icmp.cc	/^u_int16_t ICMP::get_icmpId()$/;"	f	namespace:usipp
get_id	ip.cc	/^u_int16_t IP::get_id()$/;"	f	namespace:usipp
get_len	udp.cc	/^u_int16_t UDP::get_len()$/;"	f	namespace:usipp
get_mtu	icmp.cc	/^u_int16_t ICMP::get_mtu()$/;"	f	namespace:usipp
get_off	tcp.cc	/^u_int8_t TCP::get_off()$/;"	f	namespace:usipp
get_op	arp.cc	/^u_int16_t ARP::get_op() const$/;"	f	namespace:usipp
get_proto	ip.cc	/^u_int8_t IP::get_proto()$/;"	f	namespace:usipp
get_seq	icmp.cc	/^u_int16_t ICMP::get_seq()$/;"	f	namespace:usipp
get_seq	tcp.cc	/^u_int32_t TCP::get_seq()$/;"	f	namespace:usipp
get_sha	arp.cc	/^char *ARP::get_sha(char *hwaddr, size_t len) const$/;"	f	namespace:usipp
get_spa	arp.cc	/^char *ARP::get_spa(int resolve, char *pa, size_t len) const$/;"	f	namespace:usipp
get_src	ip.cc	/^char *IP::get_src(int resolv, char *s, size_t len)$/;"	f	namespace:usipp
get_src	ip.cc	/^u_int32_t IP::get_src()$/;"	f	namespace:usipp
get_srcport	tcp.cc	/^u_int16_t TCP::get_srcport()$/;"	f	namespace:usipp
get_srcport	udp.cc	/^u_int16_t UDP::get_srcport()$/;"	f	namespace:usipp
get_sum	ip.cc	/^u_int16_t IP::get_sum()$/;"	f	namespace:usipp
get_tcpopt	tcp.cc	/^int TCP::get_tcpopt(char *buf)$/;"	f	namespace:usipp
get_tcpsum	tcp.cc	/^u_int16_t TCP::get_tcpsum()$/;"	f	namespace:usipp
get_tha	arp.cc	/^char *ARP::get_tha(char *hwaddr, size_t len) const$/;"	f	namespace:usipp
get_tos	ip.cc	/^u_int8_t IP::get_tos()$/;"	f	namespace:usipp
get_totlen	ip.cc	/^u_int16_t IP::get_totlen()$/;"	f	namespace:usipp
get_tpa	arp.cc	/^char *ARP::get_tpa(int resolve, char *pa, size_t len) const$/;"	f	namespace:usipp
get_ttl	ip.cc	/^u_int8_t IP::get_ttl()$/;"	f	namespace:usipp
get_type	icmp.cc	/^u_int8_t ICMP::get_type()$/;"	f	namespace:usipp
get_udpsum	udp.cc	/^u_int16_t UDP::get_udpsum()$/;"	f	namespace:usipp
get_urg	tcp.cc	/^u_int16_t TCP::get_urg()$/;"	f	namespace:usipp
get_vers	ip.cc	/^u_int8_t IP::get_vers()$/;"	f	namespace:usipp
get_win	tcp.cc	/^u_int16_t TCP::get_win()$/;"	f	namespace:usipp
has_promisc	usi++/datalink.h	/^	int has_promisc;$/;"	m	class:usipp::Pcap
host	usi++/ip.h	/^	char host[1000];$/;"	m	class:usipp::IP
icmphdr	usi++/icmp.h	/^   	struct icmphdr icmphdr;$/;"	m	class:usipp::ICMP
icmphdr	usi++/usi-structs.h	/^struct icmphdr {$/;"	s	namespace:usipp
id	usi++/usi-structs.h	/^	int id;		\/\/ the IP id-filed$/;"	m	struct:usipp::fragments
id	usi++/usi-structs.h	/^                   	u_int16_t id;$/;"	m	struct:usipp::icmphdr::<anonymous>::<anonymous>
id	usi++/usi-structs.h	/^        u_int16_t id;$/;"	m	struct:usipp::iphdr
if_index	usi++/if.h	/^    unsigned int if_index;	\/* 1, 2, ... *\/$/;"	m	struct:if_nameindex
if_name	usi++/if.h	/^    char *if_name;		\/* null terminated name: "eth0", ... *\/$/;"	m	struct:if_nameindex
if_nameindex	usi++/if.h	/^struct if_nameindex$/;"	s
ifa_addr	usi++/if.h	/^    struct sockaddr ifa_addr;	\/* Address of interface.  *\/$/;"	m	struct:ifaddr
ifa_broadaddr	usi++/if.h	84;"	d
ifa_dstaddr	usi++/if.h	85;"	d
ifa_ifp	usi++/if.h	/^    struct iface *ifa_ifp;	\/* Back-pointer to interface.  *\/$/;"	m	struct:ifaddr
ifa_ifu	usi++/if.h	/^      } ifa_ifu;$/;"	m	struct:ifaddr
ifa_next	usi++/if.h	/^    struct ifaddr *ifa_next;	\/* Next address for interface.  *\/$/;"	m	struct:ifaddr
ifaddr	usi++/if.h	/^struct ifaddr$/;"	s
ifc_buf	usi++/if.h	165;"	d
ifc_ifcu	usi++/if.h	/^      } ifc_ifcu;$/;"	m	struct:ifconf
ifc_len	usi++/if.h	/^    int	ifc_len;			\/* Size of buffer.  *\/$/;"	m	struct:ifconf
ifc_req	usi++/if.h	166;"	d
ifconf	usi++/if.h	/^struct ifconf$/;"	s
ifcu_buf	usi++/if.h	/^	__caddr_t ifcu_buf;$/;"	m	union:ifconf::<anonymous>
ifcu_req	usi++/if.h	/^	struct ifreq *ifcu_req;$/;"	m	union:ifconf::<anonymous>
ifmap	usi++/if.h	/^struct ifmap$/;"	s
ifr_addr	usi++/if.h	137;"	d
ifr_bandwidth	usi++/if.h	148;"	d
ifr_broadaddr	usi++/if.h	139;"	d
ifr_data	usi++/if.h	146;"	d
ifr_dstaddr	usi++/if.h	138;"	d
ifr_flags	usi++/if.h	141;"	d
ifr_hwaddr	usi++/if.h	136;"	d
ifr_ifindex	usi++/if.h	147;"	d
ifr_ifrn	usi++/if.h	/^      } ifr_ifrn;$/;"	m	struct:ifreq
ifr_ifru	usi++/if.h	/^      } ifr_ifru;$/;"	m	struct:ifreq
ifr_map	usi++/if.h	144;"	d
ifr_metric	usi++/if.h	142;"	d
ifr_mtu	usi++/if.h	143;"	d
ifr_name	usi++/if.h	135;"	d
ifr_netmask	usi++/if.h	140;"	d
ifr_qlen	usi++/if.h	149;"	d
ifr_slave	usi++/if.h	145;"	d
ifreq	usi++/if.h	/^struct ifreq$/;"	s
ifrn_name	usi++/if.h	/^	char ifrn_name[IFNAMSIZ];	\/* Interface name, e.g. "en0".  *\/$/;"	m	union:ifreq::<anonymous>
ifru_addr	usi++/if.h	/^	struct sockaddr ifru_addr;$/;"	m	union:ifreq::<anonymous>
ifru_broadaddr	usi++/if.h	/^	struct sockaddr ifru_broadaddr;$/;"	m	union:ifreq::<anonymous>
ifru_data	usi++/if.h	/^	__caddr_t ifru_data;$/;"	m	union:ifreq::<anonymous>
ifru_dstaddr	usi++/if.h	/^	struct sockaddr ifru_dstaddr;$/;"	m	union:ifreq::<anonymous>
ifru_flags	usi++/if.h	/^	short int ifru_flags;$/;"	m	union:ifreq::<anonymous>
ifru_hwaddr	usi++/if.h	/^	struct sockaddr ifru_hwaddr;$/;"	m	union:ifreq::<anonymous>
ifru_ivalue	usi++/if.h	/^	int ifru_ivalue;$/;"	m	union:ifreq::<anonymous>
ifru_map	usi++/if.h	/^	struct ifmap ifru_map;$/;"	m	union:ifreq::<anonymous>
ifru_mtu	usi++/if.h	/^	int ifru_mtu;$/;"	m	union:ifreq::<anonymous>
ifru_netmask	usi++/if.h	/^	struct sockaddr ifru_netmask;$/;"	m	union:ifreq::<anonymous>
ifru_slave	usi++/if.h	/^	char ifru_slave[IFNAMSIZ];	\/* Just fits the size *\/$/;"	m	union:ifreq::<anonymous>
ifu_broadaddr	usi++/if.h	/^	struct sockaddr	ifu_broadaddr;$/;"	m	union:ifaddr::<anonymous>
ifu_dstaddr	usi++/if.h	/^	struct sockaddr	ifu_dstaddr;$/;"	m	union:ifaddr::<anonymous>
ihl	usi++/usi-structs.h	/^    	u_int32_t ihl:4;$/;"	m	struct:usipp::iphdr
in_cksum	misc.cc	/^in_cksum (unsigned short *ptr, int nbytes)$/;"	f	namespace:usipp
init_device	Layer2.cc	/^int Layer2::init_device(char *dev, int p, size_t snaplen)$/;"	f	namespace:usipp
init_device	arp.cc	/^int ARP::init_device(char *dev, int p, size_t len)$/;"	f	namespace:usipp
init_device	datalink.cc	/^int Pcap::init_device(char *dev, int promisc, size_t snaplen)$/;"	f	namespace:usipp
init_device	icmp.cc	/^int ICMP::init_device(char *dev, int promisc, size_t snaplen)$/;"	f	namespace:usipp
init_device	ip.cc	/^int IP::init_device(char *dev, int promisc, size_t snaplen)$/;"	f	namespace:usipp
init_device	tcp.cc	/^int TCP::init_device(char *dev, int promisc, size_t snaplen)$/;"	f	namespace:usipp
init_device	udp.cc	/^int UDP::init_device(char *dev, int promisc, size_t snaplen)$/;"	f	namespace:usipp
ipOptions	usi++/ip.h	/^	char ipOptions[40];$/;"	m	class:usipp::IP
iph	usi++/ip.h	/^	struct iphdr iph;$/;"	m	class:usipp::IP
iphdr	usi++/usi-structs.h	/^struct iphdr$/;"	s	namespace:usipp
irq	usi++/if.h	/^    unsigned char irq;$/;"	m	struct:ifmap
len	usi++/usi-structs.h	/^	int len;	\/\/ how much data received yet?$/;"	m	struct:usipp::fragments
len	usi++/usi-structs.h	/^        u_int16_t	len;$/;"	m	struct:usipp::udphdr
len	usi++/usi-structs.h	/^        u_int16_t len;$/;"	m	struct:usipp::pseudohdr
localnet	usi++/datalink.h	/^        bpf_u_int32 localnet, netmask;$/;"	m	class:usipp::Pcap
mem_end	usi++/if.h	/^    unsigned long int mem_end;$/;"	m	struct:ifmap
mem_start	usi++/if.h	/^    unsigned long int mem_start;$/;"	m	struct:ifmap
mtu	usi++/usi-structs.h	/^                        u_int16_t mtu;$/;"	m	struct:usipp::icmphdr::<anonymous>::<anonymous>
netmask	usi++/datalink.h	/^        bpf_u_int32 localnet, netmask;$/;"	m	class:usipp::Pcap
one_byte	usi++/usi-structs.h	/^	char one_byte;	   \/\/ kind: 3$/;"	m	union:usipp::tcp_options
one_word	usi++/usi-structs.h	/^	u_int16_t one_word;    \/\/ kind: 2$/;"	m	union:usipp::tcp_options
operator =	datalink.cc	/^Pcap &Pcap::operator=(const Pcap &rhs)$/;"	f	namespace:usipp
operator =	icmp.cc	/^ICMP &ICMP::operator=(const ICMP &rhs)$/;"	f	namespace:usipp
operator =	ip.cc	/^IP& IP::operator=(const IP &rhs)$/;"	f	namespace:usipp
operator =	tcp.cc	/^TCP &TCP::operator=(const TCP &rhs)$/;"	f	namespace:usipp
operator =	udp.cc	/^UDP &UDP::operator=(const UDP &rhs)$/;"	f	namespace:usipp
origLen	usi++/usi-structs.h	/^	int origLen;	\/\/ and how much has it to be?$/;"	m	struct:usipp::fragments
pd	usi++/datalink.h	/^        pcap_t *pd;$/;"	m	class:usipp::Pcap
phdr	usi++/datalink.h	/^        struct pcap_pkthdr phdr;$/;"	m	class:usipp::Pcap
port	usi++/if.h	/^    unsigned char port;$/;"	m	struct:ifmap
proto	usi++/usi-structs.h	/^        u_int8_t proto;$/;"	m	struct:usipp::pseudohdr
protocol	usi++/usi-structs.h	/^        u_int8_t protocol;$/;"	m	struct:usipp::iphdr
pseudo	usi++/tcp.h	/^      	struct pseudohdr pseudo;$/;"	m	class:usipp::TCP
pseudo	usi++/udp.h	/^	struct pseudohdr pseudo;$/;"	m	class:usipp::UDP
pseudohdr	usi++/usi-structs.h	/^struct pseudohdr {$/;"	s	namespace:usipp
rawfd	usi++/TX_IP.h	/^	int rawfd;$/;"	m	class:usipp::TX_IP
reassemble	ip.cc	/^char *IP::reassemble(char *packet, int len, int *resultLen)$/;"	f	namespace:usipp
register_rx	usi++/Layer2.h	/^	RX *register_rx(RX *r) { RX *ret = rx; rx = r; return ret; }$/;"	f	class:usipp::Layer2
register_tx	usi++/Layer2.h	/^	TX *register_tx(TX *t) { TX *r = tx; tx = t; return r; }$/;"	f	class:usipp::Layer2
reset_tcpopt	tcp.cc	/^int TCP::reset_tcpopt()$/;"	f	namespace:usipp
rx	usi++/Layer2.h	/^	RX *rx;		\/\/ for receiving$/;"	m	class:usipp::Layer2
saddr	usi++/ip.h	/^        struct sockaddr_in saddr;$/;"	m	class:usipp::IP
saddr	usi++/usi-structs.h	/^   	u_int32_t saddr;$/;"	m	struct:usipp::pseudohdr
saddr	usi++/usi-structs.h	/^        u_int32_t saddr;$/;"	m	struct:usipp::iphdr
sendpack	Layer2.cc	/^int Layer2::sendpack(void *buf, size_t len, struct sockaddr *s)$/;"	f	namespace:usipp
sendpack	TX_IP.cc	/^int TX_IP::sendpack(void *buf, size_t len, struct sockaddr *s)$/;"	f	namespace:usipp
sendpack	icmp.cc	/^int ICMP::sendpack(char *payload)$/;"	f	namespace:usipp
sendpack	icmp.cc	/^int ICMP::sendpack(void *payload, size_t paylen)$/;"	f	namespace:usipp
sendpack	ip.cc	/^int IP::sendpack(char *payload)$/;"	f	namespace:usipp
sendpack	ip.cc	/^int IP::sendpack(void *payload, size_t paylen)$/;"	f	namespace:usipp
sendpack	tcp.cc	/^int TCP::sendpack(char *s)$/;"	f	namespace:usipp
sendpack	tcp.cc	/^int TCP::sendpack(void *buf, size_t paylen)$/;"	f	namespace:usipp
sendpack	udp.cc	/^int UDP::sendpack(char *s)$/;"	f	namespace:usipp
sendpack	udp.cc	/^int UDP::sendpack(void *buf, size_t paylen)$/;"	f	namespace:usipp
sequence	usi++/usi-structs.h	/^                        u_int16_t sequence;$/;"	m	struct:usipp::icmphdr::<anonymous>::<anonymous>
set_ack	tcp.cc	/^int TCP::set_ack(u_int32_t a)$/;"	f	namespace:usipp
set_code	icmp.cc	/^int ICMP::set_code(u_int8_t c)$/;"	f	namespace:usipp
set_dst	ip.cc	/^int IP::set_dst(const char* host)$/;"	f	namespace:usipp
set_dst	ip.cc	/^int IP::set_dst(u_int32_t d)$/;"	f	namespace:usipp
set_dstport	tcp.cc	/^int TCP::set_dstport(u_int16_t dp)$/;"	f	namespace:usipp
set_dstport	udp.cc	/^int UDP::set_dstport(u_int16_t dp)$/;"	f	namespace:usipp
set_flags	tcp.cc	/^int TCP::set_flags(u_int8_t f)$/;"	f	namespace:usipp
set_fragoff	ip.cc	/^int IP::set_fragoff(u_int16_t f)$/;"	f	namespace:usipp
set_gateway	icmp.cc	/^int ICMP::set_gateway(u_int32_t g)$/;"	f	namespace:usipp
set_hlen	ip.cc	/^int IP::set_hlen(u_int8_t l)$/;"	f	namespace:usipp
set_icmpId	icmp.cc	/^int ICMP::set_icmpId(u_int16_t id)$/;"	f	namespace:usipp
set_id	ip.cc	/^int IP::set_id(u_int16_t id)$/;"	f	namespace:usipp
set_len	udp.cc	/^int UDP::set_len(u_int16_t l)$/;"	f	namespace:usipp
set_mtu	icmp.cc	/^int ICMP::set_mtu(u_int16_t mtu)$/;"	f	namespace:usipp
set_off	tcp.cc	/^int TCP::set_off(u_int8_t o)$/;"	f	namespace:usipp
set_proto	ip.cc	/^int IP::set_proto(u_int8_t p)$/;"	f	namespace:usipp
set_seq	icmp.cc	/^int ICMP::set_seq(u_int16_t s)$/;"	f	namespace:usipp
set_seq	tcp.cc	/^int TCP::set_seq(u_int32_t s)$/;"	f	namespace:usipp
set_src	ip.cc	/^int IP::set_src(const char* host)$/;"	f	namespace:usipp
set_src	ip.cc	/^int IP::set_src(u_int32_t s)$/;"	f	namespace:usipp
set_srcport	tcp.cc	/^int TCP::set_srcport(u_int16_t sp)$/;"	f	namespace:usipp
set_srcport	udp.cc	/^int UDP::set_srcport(u_int16_t sp)$/;"	f	namespace:usipp
set_sum	ip.cc	/^int IP::set_sum(u_int16_t s)$/;"	f	namespace:usipp
set_tcpopt	tcp.cc	/^int TCP::set_tcpopt(char kind, unsigned char len, union tcp_options to)$/;"	f	namespace:usipp
set_tcpsum	tcp.cc	/^int TCP::set_tcpsum(u_int16_t s)$/;"	f	namespace:usipp
set_tos	ip.cc	/^int IP::set_tos(u_int8_t tos)$/;"	f	namespace:usipp
set_totlen	ip.cc	/^int IP::set_totlen(u_int16_t t)$/;"	f	namespace:usipp
set_ttl	ip.cc	/^int IP::set_ttl(u_int8_t ttl)$/;"	f	namespace:usipp
set_type	icmp.cc	/^int ICMP::set_type(u_int8_t t)$/;"	f	namespace:usipp
set_udpsum	udp.cc	/^int UDP::set_udpsum(u_int16_t s)$/;"	f	namespace:usipp
set_urg	tcp.cc	/^int TCP::set_urg(u_int16_t u)$/;"	f	namespace:usipp
set_vers	ip.cc	/^int IP::set_vers(u_int8_t v)$/;"	f	namespace:usipp
set_win	tcp.cc	/^int TCP::set_win(u_int16_t w)$/;"	f	namespace:usipp
setfilter	Layer2.cc	/^int Layer2::setfilter(char *fstring)$/;"	f	namespace:usipp
setfilter	arp.cc	/^int ARP::setfilter(char *s)$/;"	f	namespace:usipp
setfilter	datalink.cc	/^int Pcap::setfilter(char *s)$/;"	f	namespace:usipp
snaplen	usi++/datalink.h	/^	size_t framelen, snaplen;$/;"	m	class:usipp::Pcap
sniffpack	Layer2.cc	/^int Layer2::sniffpack(void *buf, size_t len)$/;"	f	namespace:usipp
sniffpack	arp.cc	/^int ARP::sniffpack()$/;"	f	namespace:usipp
sniffpack	datalink.cc	/^int Pcap::sniffpack(void *s, size_t len)$/;"	f	namespace:usipp
sniffpack	icmp.cc	/^int ICMP::sniffpack(void *s, size_t len)$/;"	f	namespace:usipp
sniffpack	ip.cc	/^int IP::sniffpack(void *buf, size_t len)$/;"	f	namespace:usipp
sniffpack	tcp.cc	/^int TCP::sniffpack(void *buf, size_t len)$/;"	f	namespace:usipp
sniffpack	udp.cc	/^int UDP::sniffpack(void *buf, size_t len)$/;"	f	namespace:usipp
source	usi++/usi-structs.h	/^   	u_int16_t	source;$/;"	m	struct:usipp::udphdr
sum	usi++/usi-structs.h	/^        u_int16_t sum;$/;"	m	struct:usipp::icmphdr
tcpOptions	usi++/tcp.h	/^      	char tcpOptions[40];$/;"	m	class:usipp::TCP
tcp_options	usi++/usi-structs.h	/^union tcp_options {$/;"	u	namespace:usipp
tcph	usi++/tcp.h	/^      	struct tcphdr tcph;$/;"	m	class:usipp::TCP
tcphdr	usi++/usi-structs.h	/^struct tcphdr$/;"	s	namespace:usipp
th_ack	usi++/usi-structs.h	/^        u_int32_t th_ack;		\/\/ acknowledgement number$/;"	m	struct:usipp::tcphdr
th_dport	usi++/usi-structs.h	/^        u_int16_t th_dport;		\/\/ destination port $/;"	m	struct:usipp::tcphdr
th_flags	usi++/usi-structs.h	/^    	u_int8_t th_flags;$/;"	m	struct:usipp::tcphdr
th_off	usi++/usi-structs.h	/^    	u_int8_t th_off:4;		\/\/ data offset $/;"	m	struct:usipp::tcphdr
th_off	usi++/usi-structs.h	/^        u_int8_t th_off:4;		\/\/ data offset $/;"	m	struct:usipp::tcphdr
th_seq	usi++/usi-structs.h	/^        u_int32_t th_seq;		\/\/ sequence number $/;"	m	struct:usipp::tcphdr
th_sport	usi++/usi-structs.h	/^    	u_int16_t th_sport;		\/\/ source port $/;"	m	struct:usipp::tcphdr
th_sum	usi++/usi-structs.h	/^        u_int16_t th_sum;		\/\/ checksum $/;"	m	struct:usipp::tcphdr
th_urp	usi++/usi-structs.h	/^        u_int16_t th_urp;		\/\/ urgent pointer $/;"	m	struct:usipp::tcphdr
th_win	usi++/usi-structs.h	/^    	u_int16_t th_win;		\/\/ window $/;"	m	struct:usipp::tcphdr
th_x2	usi++/usi-structs.h	/^    	u_int8_t th_x2:4;		\/\/ (unused) $/;"	m	struct:usipp::tcphdr
th_x2	usi++/usi-structs.h	/^        u_int8_t th_x2:4;		\/\/ (unused) $/;"	m	struct:usipp::tcphdr
tos	usi++/usi-structs.h	/^    	u_int8_t tos;$/;"	m	struct:usipp::iphdr
tot_len	usi++/usi-structs.h	/^        u_int16_t tot_len;$/;"	m	struct:usipp::iphdr
ttl	usi++/usi-structs.h	/^        u_int8_t ttl;$/;"	m	struct:usipp::iphdr
two_dwords	usi++/usi-structs.h	/^	u_int32_t two_dwords[2]; \/\/ kind: 8 (timestamp)$/;"	m	union:usipp::tcp_options
tx	usi++/Layer2.h	/^	TX *tx;		\/\/ for transmitting data$/;"	m	class:usipp::Layer2
type	usi++/usi-structs.h	/^   	u_int8_t type;$/;"	m	struct:usipp::icmphdr
u_short	misc.cc	/^typedef u_int16_t u_short;$/;"	t	file:	namespace:usipp
udph	usi++/udp.h	/^	struct udphdr udph;$/;"	m	class:usipp::UDP
udphdr	usi++/usi-structs.h	/^struct udphdr {$/;"	s	namespace:usipp
un	usi++/usi-structs.h	/^        } un;$/;"	m	struct:usipp::icmphdr
unknown	usi++/usi-structs.h	/^	char unknown[20];  \/\/ default$/;"	m	union:usipp::tcp_options
unused	usi++/usi-structs.h	/^                   	u_int16_t unused;$/;"	m	struct:usipp::icmphdr::<anonymous>::<anonymous>
useException	misc.cc	/^int useException(bool how)$/;"	f	namespace:usipp
userLen	usi++/usi-structs.h	/^	int userLen;	\/\/ and how much did we saved?$/;"	m	struct:usipp::fragments
usifault	usi++/usi++.h	/^   	usifault(const char *s = "undef") : fault(s) {}$/;"	f	class:usipp::usifault
usifault	usi++/usi++.h	/^class usifault {$/;"	c	namespace:usipp
usipp	Layer2.cc	/^namespace usipp {$/;"	n	file:
usipp	TX_IP.cc	/^namespace usipp {$/;"	n	file:
usipp	arp.cc	/^namespace usipp {$/;"	n	file:
usipp	datalink.cc	/^namespace usipp {$/;"	n	file:
usipp	icmp.cc	/^namespace usipp {$/;"	n	file:
usipp	ip.cc	/^namespace usipp {$/;"	n	file:
usipp	misc.cc	/^namespace usipp {$/;"	n	file:
usipp	tcp.cc	/^namespace usipp {$/;"	n	file:
usipp	udp.cc	/^namespace usipp {$/;"	n	file:
usipp	usi++/Layer2.h	/^namespace usipp {$/;"	n
usipp	usi++/RX.h	/^namespace usipp {$/;"	n
usipp	usi++/TX.h	/^namespace usipp {$/;"	n
usipp	usi++/TX_IP.h	/^namespace usipp {$/;"	n
usipp	usi++/arp.h	/^namespace usipp {$/;"	n
usipp	usi++/datalink.h	/^namespace usipp {$/;"	n
usipp	usi++/icmp.h	/^namespace usipp {$/;"	n
usipp	usi++/ip.h	/^namespace usipp {$/;"	n
usipp	usi++/tcp.h	/^namespace usipp {$/;"	n
usipp	usi++/udp.h	/^namespace usipp {$/;"	n
usipp	usi++/usi++.h	/^namespace usipp {$/;"	n
usipp	usi++/usi-structs.h	/^namespace usipp {$/;"	n
version	usi++/usi-structs.h	/^        u_int32_t version:4;$/;"	m	struct:usipp::iphdr
why	usi++/usi++.h	/^	const char *why() { return fault.c_str(); }$/;"	f	class:usipp::usifault
zero	usi++/usi-structs.h	/^        u_int8_t zero;$/;"	m	struct:usipp::pseudohdr
~ARP	arp.cc	/^ARP::~ARP()$/;"	f	namespace:usipp
~ICMP	icmp.cc	/^ICMP::~ICMP()$/;"	f	namespace:usipp
~IP	ip.cc	/^IP::~IP()$/;"	f	namespace:usipp
~Layer2	usi++/Layer2.h	/^	virtual ~Layer2() {}$/;"	f	class:usipp::Layer2
~Pcap	datalink.cc	/^Pcap::~Pcap()$/;"	f	namespace:usipp
~RX	usi++/RX.h	/^	virtual ~RX() {}$/;"	f	class:usipp::RX
~TCP	tcp.cc	/^TCP::~TCP()$/;"	f	namespace:usipp
~TX	usi++/TX.h	/^	virtual ~TX() {}$/;"	f	class:usipp::TX
~TX_IP	usi++/TX_IP.h	/^	virtual ~TX_IP() {}$/;"	f	class:usipp::TX_IP
~UDP	udp.cc	/^UDP::~UDP()$/;"	f	namespace:usipp
~usifault	usi++/usi++.h	/^        ~usifault() {}$/;"	f	class:usipp::usifault
